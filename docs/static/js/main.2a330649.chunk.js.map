{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["theme","global","font","family","weight","size","height","AppBar","props","react_default","a","createElement","Box","Object","assign","tag","direction","align","justify","background","pad","left","right","vertical","elevation","style","zIndex","App","state","onActive","index","_this","setState","Grommet","full","ResponsiveContext","Consumer","fill","App_AppBar","Heading","level","margin","flex","overflow","horizontal","Grid","columns","count","gap","Ad","Cli","Deploy","fontWeight","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gRAeMA,EAAQ,CACZC,OAAQ,CACNC,KAAM,CACJC,OAAQ,QACRC,OAAQ,IACRC,KAAM,OACNC,OAAQ,UAKRC,EAAS,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAACC,EAAA,EAADC,OAAAC,OAAA,CACEC,IAAI,SACJC,UAAU,MACVC,MAAM,SACNC,QAAQ,UACRC,WAAW,SACXC,IAAK,CAAEC,KAAM,SAAUC,MAAO,QAASC,SAAU,SACjDC,UAAU,SACVC,MAAO,CAAEC,OAAQ,MACblB,KAmDOmB,6MA9CbC,MAAQ,KAERC,SAAW,SAAAC,GAAK,OAAIC,EAAKC,SAAS,CAAEF,mFAIlC,OACErB,EAAAC,EAAAC,cAACsB,EAAA,EAAD,CAASjC,MAAOA,EAAOkC,MAAI,GACzBzB,EAAAC,EAAAC,cAACwB,EAAA,EAAkBC,SAAnB,KACG,SAAA/B,GAAI,OACHI,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKyB,MAAI,GACP5B,EAAAC,EAAAC,cAAC2B,EAAD,KACE7B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAASC,MAAM,IAAIC,OAAO,QAA1B,kBAIFhC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAKI,UAAU,MAAMG,WAAW,QAAQuB,MAAI,EAACC,SAAU,CAAEC,WAAY,WACnEnC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAK8B,MAAI,EAACzB,MAAM,SAASC,QAAQ,UAC/BT,EAAAC,EAAAC,cAACkC,EAAA,EAAD,CACEC,QAAS,CACPC,MAAO,EACP1C,KAAM,QAER2C,IAAI,SAEJvC,EAAAC,EAAAC,cAACsC,EAAA,EAAD,CAAI5C,KAAK,WACTI,EAAAC,EAAAC,cAACuC,EAAA,EAAD,CAAK7C,KAAK,WACVI,EAAAC,EAAAC,cAACwC,EAAA,EAAD,CAAQ9C,KAAK,YAEfI,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,WACVF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAASC,MAAM,IAAIC,OAAO,OAAOhB,MAAO,CAAC2B,WAAc,MAAvD,+BAGA3C,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAASC,MAAM,IAAIC,OAAO,OAAOhB,MAAO,CAAC2B,WAAc,MAAvD,gCAlCAC,aC5BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOnD,EAAAC,EAAAC,cAACkD,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.2a330649.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  Box,\n  Heading,\n  Grommet,\n  ResponsiveContext,\n  Grid\n} from \"grommet\";\n\nimport {\n  Deploy,\n  Cli,\n  Ad\n} from \"grommet-icons\";\n\nconst theme = {\n  global: {\n    font: {\n      family: \"Dosis\",\n      weight: 600,\n      size: \"20px\",\n      height: \"20px\"\n    }\n  }\n};\n\nconst AppBar = props => (\n  <Box\n    tag=\"header\"\n    direction=\"row\"\n    align=\"center\"\n    justify=\"between\"\n    background=\"ffffff\"\n    pad={{ left: \"medium\", right: \"small\", vertical: \"small\" }}\n    elevation=\"medium\"\n    style={{ zIndex: \"1\" }}\n    {...props}\n  />\n);\n\nclass App extends Component {\n  state = {};\n\n  onActive = index => this.setState({ index });\n\n  render() {\n\n    return (\n      <Grommet theme={theme} full>\n        <ResponsiveContext.Consumer>\n          {size => (\n            <Box fill>\n              <AppBar>\n                <Heading level=\"3\" margin=\"none\">\n                  John Leonardo\n                </Heading>\n              </AppBar>\n              <Box direction=\"row\" background=\"brand\" flex overflow={{ horizontal: \"hidden\" }}>\n                <Box flex align=\"center\" justify=\"center\">\n                  <Grid\n                    columns={{\n                      count: 3,\n                      size: \"auto\"\n                    }}\n                    gap=\"large\"\n                  >\n                    <Ad size=\"xlarge\"/>\n                    <Cli size=\"xlarge\"/>\n                    <Deploy size=\"xlarge\"/>\n                  </Grid>\n                  <br/><br/><br/>\n                  <Heading level=\"1\" margin=\"none\" style={{\"fontWeight\": 800}}>\n                    Website under construction.\n                  </Heading>\n                  <Heading level=\"3\" margin=\"none\" style={{\"fontWeight\": 800}}>\n                    - John Leonardo\n                  </Heading>\n                </Box>\n              </Box>\n            </Box>\n          )}\n        </ResponsiveContext.Consumer>\n      </Grommet>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}